// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rentcar.Data;

#nullable disable

namespace rentcar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3a2bbc2b-b3bb-43ff-ad41-4b613092f780",
                            ConcurrencyStamp = "a2f5a909-4464-475a-8154-1a0a73c89ec7",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "048fc5cf-1a1d-42fd-a7be-c8d60964ecd8",
                            ConcurrencyStamp = "b09903ac-eedf-4311-ac62-2f70dd2d1d4f",
                            Name = "Vendor",
                            NormalizedName = "Vendor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "acfea0f0-134a-4d41-8b13-33827f3341c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8e797f0-90ca-4318-a78b-0e01ad882acf",
                            Email = "admin@rentcar.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RENTCAR.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMHqCKx2L3Sj/OOH5Zeqd15rH5Y04PERC1Am35m+LNIwS/HwbIVtDnC2/JVqecI/8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "acfea0f0-134a-4d41-8b13-33827f3341c1",
                            RoleId = "3a2bbc2b-b3bb-43ff-ad41-4b613092f780"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rentcar.Models.Db.AdminDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id_User");

                    b.ToTable("mAdmin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Id_User = "acfea0f0-134a-4d41-8b13-33827f3341c1",
                            Nama = "Admin"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.CustomerDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alamat")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("FotoKTP")
                        .HasColumnType("Image");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id_User");

                    b.ToTable("mCustomer");
                });

            modelBuilder.Entity("rentcar.Models.Db.JenisBahanBakarDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("mJenisBahanBakar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nama = "Bensin"
                        },
                        new
                        {
                            Id = 2,
                            Nama = "Solar"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.JenisBiayaDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("mJenisBiaya");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nama = "DP"
                        },
                        new
                        {
                            Id = 2,
                            Nama = "Sisa Bayar"
                        },
                        new
                        {
                            Id = 3,
                            Nama = "Kerusakan"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.KendaraanDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Foto")
                        .HasColumnType("Image");

                    b.Property<int>("Id_TipeKendaraan")
                        .HasColumnType("int");

                    b.Property<int>("Id_Vendor")
                        .HasColumnType("int");

                    b.Property<string>("NoPolisi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomorMesin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("STNKAtasNama")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TahunPembuatan")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TanggalSamsat")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("TanggalSamsat5Tahun")
                        .HasColumnType("Date");

                    b.Property<string>("Warna")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id_TipeKendaraan");

                    b.HasIndex("Id_Vendor");

                    b.ToTable("mKendaraan");
                });

            modelBuilder.Entity("rentcar.Models.Db.KondisiKendaraanDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Bensin")
                        .HasColumnType("int");

                    b.Property<string>("Catatan")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id_Admin")
                        .HasColumnType("int");

                    b.Property<int>("Id_Kendaraan")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Sewa")
                        .HasColumnType("int");

                    b.Property<string>("Kelengkapan")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Kilometer")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tanggal")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id_Admin");

                    b.HasIndex("Id_Kendaraan");

                    b.HasIndex("Id_Sewa");

                    b.ToTable("trKondisiKendaraan");
                });

            modelBuilder.Entity("rentcar.Models.Db.KondisiKendaraanFotoDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Foto")
                        .HasColumnType("Image");

                    b.Property<int>("Id_KondisiKendaraan")
                        .HasColumnType("int");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_KondisiKendaraan");

                    b.ToTable("trKondisiKendaraanFoto");
                });

            modelBuilder.Entity("rentcar.Models.Db.KonfigurasiDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("mKonfigurasi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nama = "Perusahaan",
                            Value = "RENT CAR"
                        },
                        new
                        {
                            Id = 2,
                            Nama = "Telp",
                            Value = "081234567890"
                        },
                        new
                        {
                            Id = 3,
                            Nama = "Website",
                            Value = "debayus.mahas.my.id"
                        },
                        new
                        {
                            Id = 4,
                            Nama = "Alamat",
                            Value = "Jln. Jalan No.26, Jimbaran, Badung, Bali"
                        },
                        new
                        {
                            Id = 5,
                            Nama = "DP",
                            Value = "50"
                        },
                        new
                        {
                            Id = 6,
                            Nama = "Bank1",
                            Value = ""
                        },
                        new
                        {
                            Id = 7,
                            Nama = "Bank2",
                            Value = ""
                        },
                        new
                        {
                            Id = 8,
                            Nama = "Bank2Tampilkan",
                            Value = "False"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.MerekKendaraanDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("mMerekKendaraan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nama = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Nama = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            Nama = "Suzuki"
                        },
                        new
                        {
                            Id = 4,
                            Nama = "Mazda"
                        },
                        new
                        {
                            Id = 5,
                            Nama = "Daihatsu"
                        },
                        new
                        {
                            Id = 6,
                            Nama = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            Nama = "Jeep"
                        },
                        new
                        {
                            Id = 8,
                            Nama = "Mitsubishi"
                        },
                        new
                        {
                            Id = 9,
                            Nama = "Nissan"
                        },
                        new
                        {
                            Id = 10,
                            Nama = "Datsun"
                        },
                        new
                        {
                            Id = 11,
                            Nama = "Yamaha"
                        },
                        new
                        {
                            Id = 12,
                            Nama = "Kawasaki"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaBiayaDbModel", b =>
                {
                    b.Property<int>("Id_Sewa")
                        .HasColumnType("int");

                    b.Property<int>("Id_JenisBiaya")
                        .HasColumnType("int");

                    b.Property<decimal>("Biaya")
                        .HasColumnType("Money");

                    b.Property<string>("Catatan")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("FotoBukti")
                        .HasColumnType("Image");

                    b.Property<bool>("Lunas")
                        .HasColumnType("bit");

                    b.HasKey("Id_Sewa", "Id_JenisBiaya");

                    b.HasIndex("Id_JenisBiaya");

                    b.ToTable("trSewaBiaya");
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Batal")
                        .HasColumnType("bit");

                    b.Property<decimal>("Harga")
                        .HasColumnType("Money");

                    b.Property<int>("Id_Admin")
                        .HasColumnType("int");

                    b.Property<int>("Id_Customer")
                        .HasColumnType("int");

                    b.Property<int>("Id_Kendaraan")
                        .HasColumnType("int");

                    b.Property<int>("LamaSewa")
                        .HasColumnType("int");

                    b.Property<string>("NoBukti")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Tanggal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TanggalDiambil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TanggalDikembalian")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TanggalSewa")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id_Admin");

                    b.HasIndex("Id_Customer");

                    b.HasIndex("Id_Kendaraan");

                    b.ToTable("trSewa");
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaPerjanjianDbModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Alamat")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NamaUsaha")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Tanggal")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("trSewaPerjanjian");
                });

            modelBuilder.Entity("rentcar.Models.Db.TipeKendaraanDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Harga")
                        .HasColumnType("Money");

                    b.Property<int?>("Id_JenisBahanBakar")
                        .HasColumnType("int");

                    b.Property<int>("Id_MerekKendaraan")
                        .HasColumnType("int");

                    b.Property<string>("Jenis")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Transmisi")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Id_JenisBahanBakar");

                    b.HasIndex("Id_MerekKendaraan");

                    b.ToTable("mTipeKendaraan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Agya",
                            Transmisi = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Avanza",
                            Transmisi = "Manual"
                        },
                        new
                        {
                            Id = 3,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Calya",
                            Transmisi = "Manual"
                        },
                        new
                        {
                            Id = 4,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Agya",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 5,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Avanza",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 6,
                            Harga = 150000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 1,
                            Jenis = "Mobil",
                            Nama = "Calya",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 7,
                            Harga = 30000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 2,
                            Jenis = "Motor",
                            Nama = "Beat",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 8,
                            Harga = 30000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 2,
                            Jenis = "Motor",
                            Nama = "Vario",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 9,
                            Harga = 30000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 2,
                            Jenis = "Motor",
                            Nama = "Scoopy",
                            Transmisi = "Matic"
                        },
                        new
                        {
                            Id = 10,
                            Harga = 30000m,
                            Id_JenisBahanBakar = 1,
                            Id_MerekKendaraan = 11,
                            Jenis = "Motor",
                            Nama = "N-Max",
                            Transmisi = "Matic"
                        });
                });

            modelBuilder.Entity("rentcar.Models.Db.VendorDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alamat")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id_User");

                    b.ToTable("mVendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rentcar.Models.Db.AdminDbModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rentcar.Models.Db.CustomerDbModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rentcar.Models.Db.KendaraanDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.TipeKendaraanDbModel", "TipeKendaraan")
                        .WithMany()
                        .HasForeignKey("Id_TipeKendaraan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.VendorDbModel", "Vendor")
                        .WithMany()
                        .HasForeignKey("Id_Vendor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipeKendaraan");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("rentcar.Models.Db.KondisiKendaraanDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.AdminDbModel", "Admin")
                        .WithMany()
                        .HasForeignKey("Id_Admin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.KendaraanDbModel", "Kendaraan")
                        .WithMany()
                        .HasForeignKey("Id_Kendaraan")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.SewaDbModel", "Sewa")
                        .WithMany()
                        .HasForeignKey("Id_Sewa");

                    b.Navigation("Admin");

                    b.Navigation("Kendaraan");

                    b.Navigation("Sewa");
                });

            modelBuilder.Entity("rentcar.Models.Db.KondisiKendaraanFotoDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.KondisiKendaraanDbModel", "KondisiKendaraan")
                        .WithMany()
                        .HasForeignKey("Id_KondisiKendaraan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KondisiKendaraan");
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaBiayaDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.JenisBiayaDbModel", "JenisBiaya")
                        .WithMany()
                        .HasForeignKey("Id_JenisBiaya")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.SewaDbModel", "Sewa")
                        .WithMany()
                        .HasForeignKey("Id_Sewa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JenisBiaya");

                    b.Navigation("Sewa");
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.AdminDbModel", "Admin")
                        .WithMany()
                        .HasForeignKey("Id_Admin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.CustomerDbModel", "Customer")
                        .WithMany()
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rentcar.Models.Db.KendaraanDbModel", "Kendaraan")
                        .WithMany()
                        .HasForeignKey("Id_Kendaraan")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Kendaraan");
                });

            modelBuilder.Entity("rentcar.Models.Db.SewaPerjanjianDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.SewaDbModel", "Sewa")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sewa");
                });

            modelBuilder.Entity("rentcar.Models.Db.TipeKendaraanDbModel", b =>
                {
                    b.HasOne("rentcar.Models.Db.JenisBahanBakarDbModel", "JenisBahanBakar")
                        .WithMany()
                        .HasForeignKey("Id_JenisBahanBakar");

                    b.HasOne("rentcar.Models.Db.MerekKendaraanDbModel", "MerekKendaraan")
                        .WithMany()
                        .HasForeignKey("Id_MerekKendaraan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JenisBahanBakar");

                    b.Navigation("MerekKendaraan");
                });

            modelBuilder.Entity("rentcar.Models.Db.VendorDbModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
